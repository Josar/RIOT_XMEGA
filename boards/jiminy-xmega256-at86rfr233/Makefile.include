# define the cpu used by the ias atxmage256a3u board
export CPU= atxmega256a3u

export AVRDUDE_MCU = x256a3u

export INCLUDES += -I $(RIOTBOARD)/avr-xmega-ias/
export INCLUDES += -I $(RIOTBOARD)/avr-xmega-ias/include


export CFLAGS += -v
SIZEFLAGS = --format=avr --mcu=$(CPU)

#define the flash-tool and default port depending on the host operating system
OS = $(shell uname)
ifeq ($(OS),Linux)
  
  PORT ?= /dev/ttyACM0
  # -@ ignore fail and continue with next make command
  # find process using ACM0 and kill it
  #PREFLASHER = sudo pgrep -f /dev/ttyACM0 2>/dev/null |xargs --no-run-if-empty kill
  
  FLASHER = avrdude
  #export PROGRAMMER ?= atmelice        # Atmel-ICE (ARM/AVR) in JTAG mode
  export PROGRAMMER ?=atmelice_pdi     # Atmel-ICE (ARM/AVR) in PDI mode

  # -D	Disable auto erase for flash memory
  # -V  Do not verify.
  export PROGRAMMER_FLAGS = -v
  export FLASHER_PATH ="/usr/local/etc/avrdude.conf" # self compile avrdude
  export FFLAGS += -c $(PROGRAMMER) -p $(AVRDUDE_MCU)  $(PROGRAMMER_FLAGS) -U flash:w:bin/$(BOARD)/$(PROJECT)$(APPLICATION).hex:i -C $(FLASHER_PATH) 

else
  $(info CAUTION: No flash tool for your host system found!)
  # TODO: fix for building under windows
endif

export FLASHER
export PORT
export DIST_PATH = $(RIOTBOARD)/$(BOARD)/dist

# define build specific options
export CFLAGS_CPU   = -mmcu=$(CPU_MODEL)  $(CFLAGS_FPU)
export CFLAGS_OPT  ?= -Os

export CFLAGS += -mrelax -Wl,--relax -Wl,-V $(CFLAGS_CPU) $(CFLAGS_LINK) $(CFLAGS_DBG) $(CFLAGS_OPT) 
export ASFLAGS += --linkrelax $(CFLAGS_CPU) $(CFLAGS_DBG)
#export LINKFLAGS += -Wl,-t -mrelax -Wl,--relax $(CFLAGS_CPU) $(CFLAGS_DBG) $(CFLAGS_OPT) -e reset_handler
export LINKFLAGS += -Wl,-t -mrelax -Wl,--relax -Wl,-relax $(CFLAGS_CPU) $(CFLAGS_DBG) $(CFLAGS_OPT) -Wl,-u,vfprintf -lprintf_flt -lm -static -lgcc -e reset_handler -Wl,--gc-sections

#export OFLAGS += -O ihex -R .eeprom -R .fuse -R .lock -R .signature -R .user_signatures

export CFLAGS += -v
export OFLAGS += -j .text -j .data -O ihex

ifeq ($(LTO),1)
  # avr-gcc <4.8.3 has a bug when using LTO which causes a warning to be printed always:
  # '_vector_25' appears to be a misspelled signal handler [enabled by default]
  # See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59396
  export LINKFLAGS += -Wno-error
endif


